#include <iostream>
#include <stack>
#include <string>
#include <cctype>
#include <cmath>
using namespace std;
class TreeNode {
public:
 char data;
 TreeNode* left, *right;
 TreeNode(char data) {
 this->data = data;
 left = right = nullptr;
 }
};
class Tree {
public:
 TreeNode* root;
 Tree(TreeNode* node) {
 root = node;
 }
};
int height(TreeNode* root) {
 if (root == nullptr)
 return 0;
 return max(height(root->left), height(root->right)) + 1;
}
int getcol(int h) {
 if (h == 1)
 return 1;
 return getcol(h - 1) + getcol(h - 1) + 1;
}
void printTree(char** M, TreeNode* root, int col, int row, int height) {
 if (root == nullptr)
 return;
 M[row][col] = root->data;
 printTree(M, root->left, col - pow(2, height - 2), row + 1, height - 1);
 printTree(M, root->right, col + pow(2, height - 2), row + 1, height - 1);
}
void TreePrinter(Tree tree) {
 int h = height(tree.root);
 int col = getcol(h);
 char** M = new char* [h];
 for (int i = 0; i < h; i++) {
 M[i] = new char[col];
 for (int j = 0; j < col; j++) {
 M[i][j] = ' ';
 }
 }
 printTree(M, tree.root, col / 2, 0, h);
 for (int i = 0; i < h; i++) {
 for (int j = 0; j < col; j++) {
 if (M[i][j] == ' ')
 cout << " ";
 else
 cout << M[i][j];
 }
 cout << endl;
 }
}
bool isOperator(char c) {
 return (c == '+' || c == '-' || c == '*' || c == '/');
}
TreeNode* constructExpressionTree(string postfix) {
 stack<TreeNode*> st;
 for (char c : postfix) {
 if (isalnum(c)) { 
 TreeNode* node = new TreeNode(c);
 st.push(node);
 }
 else if (isOperator(c)) { 
 TreeNode* node = new TreeNode(c);
 node->right = st.top(); st.pop();
 node->left = st.top(); st.pop();
 st.push(node);
 }
 }
 return st.top();
}
void inorderRecursive(TreeNode* root) {
 if (root) {
 inorderRecursive(root->left);
 cout << root->data << " ";
 inorderRecursive(root->right);
 }
}
void preorderRecursive(TreeNode* root) {
 if (root) {
 cout << root->data << " ";
 preorderRecursive(root->left);
 preorderRecursive(root->right);
 }
}
void postorderRecursive(TreeNode* root) {
 if (root) {
 postorderRecursive(root->left);
 postorderRecursive(root->right);
 cout << root->data << " ";
 }
}
void inorderNonRecursive(TreeNode* root) {
 stack<TreeNode*> st;
 TreeNode* curr = root;
 while (curr || !st.empty()) {
 while (curr) {
 st.push(curr);
 curr = curr->left;
 }
 curr = st.top(); st.pop();
 cout << curr->data << " ";
 curr = curr->right;
 }
}
void preorderNonRecursive(TreeNode* root) {
 if (!root) return;
 stack<TreeNode*> st;
 st.push(root);
 while (!st.empty()) {
 TreeNode* curr = st.top(); st.pop();
 cout << curr->data << " ";
 if (curr->right) st.push(curr->right);
 if (curr->left) st.push(curr->left);
 }
}
void postorderNonRecursive(TreeNode* root) {
 if (!root) return;
 stack<TreeNode*> st;
 do {
 while (root) {
 if (root->right) st.push(root->right);
 st.push(root);
 root = root->left;
 }
 root = st.top(); st.pop();
 if (root->right && !st.empty() && st.top() == root->right) {
 st.pop();
 st.push(root);
 root = root->right;
 } else {
 cout << root->data << " ";
 root = nullptr;
 }
 } while (!st.empty());
}
int main() {
 string postfix = "ab+cde+**"; // Example postfix expression
 TreeNode* root = constructExpressionTree(postfix);
 cout << "Expression Tree in 2D Structure:\n";
 TreePrinter(Tree{ root });
 cout << "Recursive Inorder Traversal: ";
 inorderRecursive(root);
 cout << endl;
 cout << "Recursive Preorder Traversal: ";
 preorderRecursive(root);
 cout << endl;
 cout << "Recursive Postorder Traversal: ";
 postorderRecursive(root);
 cout << endl;
 cout << "Non-Recursive Inorder Traversal: ";
 inorderNonRecursive(root);
 cout << endl;
 cout << "Non-Recursive Preorder Traversal: ";
 preorderNonRecursive(root);
 cout << endl;
 cout << "Non-Recursive Postorder Traversal: ";
 postorderNonRecursive(root);
 cout << endl;
 return 0;
}
